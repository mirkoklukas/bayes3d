# AUTOGENERATED! DO NOT EDIT! File to edit: ../../scripts/notebooks/_mkl/04 - Raycaster.ipynb.

# %% auto 0
__all__ = ['jcast', 'solve', 'unit_vec', 'create_angles', 'line_intersect', 'cast']

# %% ../../scripts/notebooks/_mkl/04 - Raycaster.ipynb 2
import jax
import jax.numpy as jnp
import numpy as np
import matplotlib.pyplot as plt
from bayes3d._mkl.plotting import *

# %% ../../scripts/notebooks/_mkl/04 - Raycaster.ipynb 3
def solve(M, y):
    """Solves `Mx=y` for x."""
    a,b = M[0]
    c,d = M[1]
    det = a*d - b*c
    
    s = 1 /det *(  d*y[0] - b*y[1])
    t = 1 /det *(- c*y[0] + a*y[1])

    return s,t


def unit_vec(hd):
    return jnp.array([jnp.cos(hd), jnp.sin(hd)])


def create_angles(fov, num_a):
    return jnp.linspace(-fov/2, fov/2, num_a)

# %% ../../scripts/notebooks/_mkl/04 - Raycaster.ipynb 4
def line_intersect(x, dx, y, dy):
    v  = x - y
    M  = jnp.stack([-dx, dy], axis=1)
    s,t = solve(M,v)
    return s,t


# %% ../../scripts/notebooks/_mkl/04 - Raycaster.ipynb 6
def _cast(x, theta, segs, zmax=jnp.inf):

    dx = unit_vec(theta)

    segs = segs.reshape(-1,2,2)
    y  = segs[:,0]
    dy = segs[:,1] - segs[:,0]

    s,t = jax.vmap(line_intersect, (None,None,0,0))(x,dx,y,dy)

    h = (0 < s) & (0 <= t) & (t <= 1)

    s_ = jnp.where( h == True, s, zmax)
    i = jnp.argmin(s_)

    return s_[i], i

# %% ../../scripts/notebooks/_mkl/04 - Raycaster.ipynb 7
def cast(p, angles, segs):
    x  = p[:2]
    hd = p[2]
    return jax.vmap(_cast, (None, 0, None))(x, angles+hd,segs)


jcast = jax.jit(cast)
